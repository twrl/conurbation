toolchain("clang") {

    lib_switch = "-l"
    lib_dir_switch = "-L"

    tool("cc") {
        depfile = "{{output}}.d"
        command = "clang -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        description = "CC {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o"
        ]
    }
    tool("cxx") {
        depfile = "{{output}}.d"
        command = "clang++ -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        description = "CXX {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o"
        ]
    }
    tool("asm") {
        depfile = "{{output}}.d"
        command = "nasm -MF $depfile {{defines}} -f elf64 -o {{output}} {{source}}"
        depsformat = "gcc"
        description = "ASM {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o"
        ]
    }
    tool("alink") {
        rspfile = "{{output}}.rsp"
        command = "clang++ -fuse-ld=gold {{ldflags}} -Wl,--relocatable @$rspfile -o {{output}}"
        description = "LD {{output}}"
        rspfile_content = "{{inputs}}"
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        default_output_extension = ".lib"
    }
    tool("solink") {
        rspfile = "{{output}}.rsp"
        command = "clang++ -fuse-ld=gold {{ldflags}} -Wl,-Bshared -Wl,-soname={{target_output_name}}{{output_extension}} @$rspfile -o {{output}}"
        description = "LD {{output}}"
        rspfile_content = "{{libs}} {{solibs}} {{inputs}}"
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}"
        ]
        default_output_extension = ".so"
    }
    tool("link") {
        rspfile = "{{output}}.rsp"
        command = "clang++ -fuse-ld=gold {{ldflags}} @$rspfile -o {{output}}"
        description = "LD {{output}}"
        rspfile_content = "{{libs}} {{solibs}} {{inputs}}"
        outputs = [
            "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
        ]
    }
    tool("copy") {
        command = "cp {{source}} {{output}}"
        description = "CP {{source}} -> {{output}}"
    }
    tool("stamp") {
        command = "touch {{output}}"
        description = "STAMP {{output}}"
    }

}

## Feature Flags

config("faltivec") {
    cflags = ["-faltivec"]
}

config("fansi-escape-codes") {
    cflags = ["-fansi-escape-codes"]
}

config("fapple-kext") {
    cflags = ["-fapple-kext"]
}

config("fapple-pragma-pack") {
    cflags = ["-fapple-pragma-pack"]
}




config("fno-rtti") {
    cflags = ["-fno-rtti"]
}

config("fno-exceptions") {
    cflags = ["-fno-exceptions"]
}


## Warning/Error handling flags

config("Wall") {
    cflags = ["-Wall"]
}

config("pedantic") {
    cflags = ["-pedantic"]
}


## Standards Compliance Flags

config("std-14") {
    cflags_c = ["-std=c11"]
    cflags_cc = ["-std=c++1y"]
}

config("std-11") {
    cflags_c = ["-std=c11"]
    cflags_cc = ["-std=c++11"]
}


## Machine flags
config("mno-red-zone") {
    cflags = ["-mno-red-zone"]
}

config("mcmodel--large") {
    cflags = ["-mcmodel=large"]
}


## Includes
config("nostdinc") {
    cflags = ["-nostdinc"]
}

config("nostdlib") {
    ldflags = ["-nostdlib"]
}

config("ffreestanding") {
    cflags = ["-ffreestanding"]
}